As of right now (commit 8887e44794a37249c12363378fadf71a7b8f3a66), the symbol table is
showing its design flaws. As I am adding support for adding/recognizing types for
lvalues, the current system of having separate data structures for looking up the
kind of symbol and the metadata for that symbol is becoming more awkward.

What I need:

A tree structure
- Each node represents one scope
- A map (string name -> NameType and index)
A vector of Ranges (represents Discrete types)
- No deletions, append to end, noting index
A vector of LValues (represents variables/constants within the program)
- No deletions, append to end, noting index

struct SymbolInfo {
       NameType name_type;
       size_t index;
};

struct Scope {
       short parent_index;
       std::unordered_map<SymbolId, SymbolInfo> symbols{};
};

class SymbolTable {
public:
      void open_scope();
      void close_scope();
      std::optional<SymbolInfo> find(const std::string& name) const;
      const LValue& get_lvalue(short index) const;
      const Range& get_range_type(short index) const;
      bool add_lvalue(const std::string& name, const std::string& type_name);
      bool add_type(const std::string& name, multi_int lower, multi_int upper);
      bool add_function(const std::string& name);
      void update(const std::string& name, NameType);
private:
      // Scope tree
      std::vector<Scope> m_scopes;
      short m_curr_scope;

      // AST entities
      std::vector<Range> m_range_types;
      std::vector<LValue> m_lvalues;
      std::vector<Function> m_functions;

      // Note: account for pre-defined symbol ids (e.g. for IntType, etc., see ast.h)
      SymbolId m_curr_symbol_id = FirstFreeId;

      // Checking that no names are declared but not defined (or imported)
      void validate_names();
};
