Todo:

# High Priority
[X] Add support for anonymous objects (besides literals, which already exist). Start
    with anonymous array objects, which can be represented using an initializer list
    and take on the type of its context
[X] Figure out semantics of ref assignment/initialization
[X] Allow variables with value types to be assigned refs
[ ] Add a pointer type. Initially, don't put major restrictions on their usage, just get
    something working
[ ] Re-add the ability to have arbitrary literal expressions in the declarations of range
    types. This is broken by moving the constant folding of literals out of the parsing pass.

# Middle Priority
[ ] Fix bug where lldb does not properly stop on breakpoints and does not map source locations
    correctly
[ ] Fix weird exit codes of compiled executables (probably from main not returning 0)
[ ] Figure out how strings should work. To start, might want to enable string literals
    to be used as initializer-list-like values for initializing Character arrays.
[ ] Add support for for-loops that iterate over a RangeType's range
[ ] Add support for user-defined record types
[ ] Add support for creating ranges and using them within larger expressions/variables
[ ] Add simple for-loops that iterate over a range
[ ] Think about using LLVM's builtin optimization pipelines (with some customization)
    as enabled in llvm::PassBuilder
[ ] Add short-circuiting to logical operators (while keeping non-short-circuiting options)

# Low Priority
[ ] Work on the various TODOs throughout the codebase
[ ] Add standard interface for adding builtin functions/types
[ ] Consider adding support for syntactic sugar for chained comparison:
    "`a op1 b op2 c ... y opN z` is equivalent to `a op1 b and b op2 c and ... y opN z`,
    except that each expression is evaluated at most once." (from Python docs)
[ ] Consider adding a viceversa keyword to be used with binary expressions
[ ] Use property-based testing to test lexer (Update: I've run libfuzzer over the lexer some.
    Still could do more)
[ ] Consider rewriting frontend/part of frontend in Ada (this is unlikely
    to be practical but would be interesting to experiment with)
[ ] Think more about the potential for proving code, possibly using z3
