Todo:

[X] Reorganize how Type objects are represented so that fewer structs (e.g. LValue)
    depend specifically on RangeTypes
[X] Add while-loops
[X] Add support for using parameters within a function definition
[X] Fix bug where programs ending with a single-line comment (maybe any comment?)
    and no trailing newline segfault
[X] Add return statement and return types, enabling non-void functions
[X] Add checks to ensure all paths out of a function have a return statement ending them
[X] Consider reading characters on-demand from an iostream in the lexer instead
    of reading everything into a big string at the start (this doesn't seem worth it;
    it is pretty simple to have a file loaded into memory, allowing bidirectional iteration,
    a big convenience that the iostream iterators can't do)
[X] In codegen, generate offsets so that indexes starting at non-zero values
    still access starting at element 0 of the underlying array pointer
[ ] Add support for writing to arrays
[ ] Figure out how strings should work
[ ] Add standard interface for adding builtin functions/types
[ ] Add support for user-defined record types
[ ] Add support for creating ranges and using them within larger expressions/variables
[ ] Add simple for-loops that iterate over a range
[ ] Add support for for-loops that iterate over a RangeType's range
[ ] Add short-circuiting to logical operators, with non-short-circuiting options
[ ] Consider adding support for syntactic sugar for chained comparison:
    "`a op1 b op2 c ... y opN z` is equivalent to `a op1 b and b op2 c and ... y opN z`,
    except that each expression is evaluated at most once." (from Python docs)
[ ] Consider adding a viceversa keyword to be used with binary expressions
[ ] Think about using LLVM's builtin optimization pipelines (with some customization)
    as enabled in llvm::PassBuilder
[ ] Work on the various TODOs throughout the codebase
[ ] Use property-based testing to test lexer (Update: I've run libfuzzer over the lexer some.
    Still could do more)
[ ] Consider rewriting frontend/part of frontend in Ada (this is unlikely
    to be practical but would be interesting to experiment with)
[ ] Think more about the potential for proving code, possibly using z3
