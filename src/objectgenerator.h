#ifndef OBJECT_GENERATOR_H
#define OBJECT_GENERATOR_H
/* Bluebird compiler - ahead-of-time compiler for the Bluebird language using LLVM.
    Copyright (C) 2020-2021  Cole Blakley

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
#include <filesystem>

namespace llvm {
    class Module;
    class TargetMachine;
};

/* This file provides a class that handles the details of generating object files
   from LLVM module objects generated by the CodeGenerator. These object files
   are written directly to file, and can be linked into an executable using
   this module. Platform-specific details are encapsulated, such as what linker
   to use and what options to try and pass it. Expects you to have generated a
   module using CodeGenerator, which owns the module object that is passed by reference
   into the constructor.
*/

class ObjectGenerator {
public:
    ObjectGenerator(const char* linker_exe_path, llvm::Module&);
    /* Emit the object file for this module */
    void emit();
    /* Link the emitted object file (along with any system/stdlib libraries/required
       module dependencies) into an executable */
    void link(std::filesystem::path&& exe);
private:
    std::filesystem::path m_object_file;
    const char* m_linker_exe_path;
    llvm::Module& m_module;
    llvm::TargetMachine* m_target_machine;
};
#endif
